import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from telethon import TelegramClient
from telethon.errors.rpcerrorlist import SessionPasswordNeededError
import asyncio
import threading
import json
import os
import sys
from typing import Optional, List, Dict, Any


# ============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•)
# ============================================
def get_persistent_path(filename: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–µ—Å—Å–∏–π, –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤).
    –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    —Ñ–∞–π–ª–æ–≤ –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º os.path.abspath(".") (—Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥),
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ –≤—Ä–æ–¥–µ sys._MEIPASS.
    return os.path.join(os.path.abspath("."), filename)


# ============================================
# –ö–û–ù–°–¢–ê–ù–¢–´
# ============================================
# –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—É—Ç—å
CONFIG_FILE = get_persistent_path("config.json")
CONTACTS_FILE = get_persistent_path("contacts.json")
SESSION_FILE_NAME = 'session_ui'  # –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ Telethon


class ThemedTelegramSenderApp:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UI,
    —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π —Å —Å–µ—Å—Å–∏—è–º–∏.
    """

    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("Telegram Sender v2.3")
        self.root.geometry("1000x800")
        self.root.minsize(800, 600)

        # –ö–ª–∏–µ–Ω—Ç Telethon
        self.client: Optional[TelegramClient] = None
        self.loop: Optional[asyncio.AbstractEventLoop] = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_sending = False
        self.is_connected = False
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
        self.config = self._load_json(CONFIG_FILE, default={"api_id": "", "api_hash": "", "phone": ""})
        self.contacts = self._load_json(CONTACTS_FILE, default={"groups": [], "themes": []})

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏ –≤–∏–¥–∂–µ—Ç—ã
        self._setup_styles()
        self._create_widgets()
        self._load_config_into_ui()
        self._populate_contacts_tree()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)

    def _setup_styles(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ ttk."""
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("TLabel", padding=5, font=('Helvetica', 10))
        style.configure("TButton", padding=8, font=('Helvetica', 10, 'bold'))
        # –î–æ–±–∞–≤–ª—è–µ–º insertbackground –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
        style.configure("TEntry", padding=5, insertbackground='black')
        style.configure("TNotebook.Tab", font=('Helvetica', 11, 'bold'), padding=[10, 5])
        style.configure("Treeview.Heading", font=('Helvetica', 10, 'bold'))
        style.configure("Treeview", rowheight=25, font=('Helvetica', 10))
        style.configure("Status.TLabel", font=('Helvetica', 10, 'italic'))
        style.configure("Success.TLabel", foreground="green")
        style.configure("Error.TLabel", foreground="red")
        style.configure("Info.TLabel", foreground="blue")

    def _create_widgets(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ –æ–∫–Ω–µ."""
        main_frame = ttk.Frame(self.root, padding=10)
        main_frame.pack(fill="both", expand=True)

        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill="both", expand=True, pady=5)

        settings_tab = ttk.Frame(self.notebook, padding=10)
        sending_tab = ttk.Frame(self.notebook, padding=10)
        self.notebook.add(settings_tab, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.notebook.add(sending_tab, text="üì§ –û—Ç–ø—Ä–∞–≤–∫–∞")

        self._create_settings_tab(settings_tab)
        self._create_sending_tab(sending_tab)

    def _create_settings_tab(self, parent: ttk.Frame) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."""
        parent.columnconfigure(0, weight=1)

        api_frame = ttk.LabelFrame(parent, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API", padding=20)
        api_frame.grid(row=0, column=0, sticky="ew", pady=(0, 10))
        api_frame.columnconfigure(1, weight=1)

        ttk.Label(api_frame, text="API ID:").grid(row=0, column=0, sticky="w", pady=5)
        self.api_id_entry = ttk.Entry(api_frame, width=40)
        self.api_id_entry.grid(row=0, column=1, sticky="ew")

        ttk.Label(api_frame, text="API Hash:").grid(row=1, column=0, sticky="w", pady=5)
        self.api_hash_entry = ttk.Entry(api_frame, width=40)
        self.api_hash_entry.grid(row=1, column=1, sticky="ew")

        ttk.Label(api_frame, text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:").grid(row=2, column=0, sticky="w", pady=5)
        self.phone_entry = ttk.Entry(api_frame, width=40)
        self.phone_entry.grid(row=2, column=1, sticky="ew")

        connection_frame = ttk.Frame(parent, padding=10)
        connection_frame.grid(row=1, column=0, sticky="ew")
        connection_frame.columnconfigure(0, weight=1)
        connection_frame.columnconfigure(1, weight=1)

        self.connect_btn = ttk.Button(connection_frame, text="üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", command=self._toggle_connection)
        self.connect_btn.grid(row=0, column=0, sticky="e", padx=5)

        self.save_btn = ttk.Button(connection_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self._save_settings)
        self.save_btn.grid(row=0, column=1, sticky="w", padx=5)

        self.status_label = ttk.Label(parent, text="–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω–æ", style="Status.TLabel")
        self.status_label.grid(row=2, column=0, sticky="ew", pady=10)

    def _create_sending_tab(self, parent: ttk.Frame) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        parent.columnconfigure(0, weight=1)
        parent.rowconfigure(0, weight=3)
        parent.rowconfigure(2, weight=2)
        parent.rowconfigure(4, weight=1)

        contacts_frame = ttk.LabelFrame(parent, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", padding=10)
        contacts_frame.grid(row=0, column=0, sticky="nsew", pady=(0, 10))
        contacts_frame.columnconfigure(0, weight=1)
        contacts_frame.rowconfigure(0, weight=1)

        cols = ("name", "cabinet", "type", "id")
        self.contacts_tree = ttk.Treeview(contacts_frame, columns=cols, show="headings", selectmode="extended")

        self.contacts_tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.contacts_tree.heading("cabinet", text="–ö–∞–±–∏–Ω–µ—Ç")
        self.contacts_tree.heading("type", text="–¢–∏–ø")
        self.contacts_tree.heading("id", text="ID")
        self.contacts_tree.column("name", width=250)
        self.contacts_tree.column("cabinet", width=100)
        self.contacts_tree.column("type", width=80, anchor="center")
        self.contacts_tree.column("id", width=150)

        scrollbar = ttk.Scrollbar(contacts_frame, orient="vertical", command=self.contacts_tree.yview)
        self.contacts_tree.configure(yscrollcommand=scrollbar.set)
        self.contacts_tree.grid(row=0, column=0, sticky="nsew")
        scrollbar.grid(row=0, column=1, sticky="ns")

        selection_frame = ttk.Frame(parent)
        selection_frame.grid(row=1, column=0, sticky="w", pady=5)
        ttk.Button(selection_frame, text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", command=self._select_all_contacts).pack(side="left", padx=5)
        ttk.Button(selection_frame, text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ", command=self._deselect_all_contacts).pack(side="left", padx=5)
        ttk.Button(selection_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", command=self._open_add_contact_dialog).pack(
            side="left", padx=5)

        msg_frame = ttk.LabelFrame(parent, text="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", padding=10)
        msg_frame.grid(row=2, column=0, sticky="nsew", pady=5)
        msg_frame.rowconfigure(0, weight=1)
        msg_frame.columnconfigure(0, weight=1)
        self.message_text = scrolledtext.ScrolledText(msg_frame, height=10, wrap=tk.WORD, font=('Helvetica', 10))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º—ã–π –∫—É—Ä—Å–æ—Ä. –ù–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        self.message_text.config(insertbackground='black')

        self.message_text.grid(row=0, column=0, sticky="nsew")
        self.message_text.insert("1.0", "–í—ñ—Ç–∞—é!\n\n–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

        send_controls_frame = ttk.Frame(parent)
        send_controls_frame.grid(row=3, column=0, sticky="nsew", pady=10)
        send_controls_frame.columnconfigure(1, weight=1)

        self.send_btn = ttk.Button(send_controls_frame, text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", command=self._start_sending)
        self.send_btn.grid(row=0, column=0, sticky="w")

        self.progress_bar = ttk.Progressbar(send_controls_frame, orient="horizontal", mode="determinate")
        self.progress_bar.grid(row=0, column=1, sticky="ew", padx=10)

        log_frame = ttk.LabelFrame(parent, text="–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏", padding=10)
        log_frame.grid(row=4, column=0, sticky="nsew")
        log_frame.rowconfigure(0, weight=1)
        log_frame.columnconfigure(0, weight=1)
        self.log_text = scrolledtext.ScrolledText(log_frame, height=8, state="disabled", font=('Courier New', 9))
        self.log_text.grid(row=0, column=0, sticky="nsew")

    def _open_add_contact_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.resizable(False, False)

        frame = ttk.Frame(dialog, padding=20)
        frame.pack(expand=True, fill="both")

        fields = {}
        ttk.Label(frame, text="–¢–∏–ø:").grid(row=0, column=0, sticky="w", pady=5)
        fields['type'] = ttk.Combobox(frame, values=["–ì—Ä—É–ø–ø–∞", "–¢–µ–º–∞"], state="readonly")
        fields['type'].grid(row=0, column=1, sticky="ew", pady=5)
        fields['type'].set("–ì—Ä—É–ø–ø–∞")

        ttk.Label(frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=1, column=0, sticky="w", pady=5)
        fields['name'] = ttk.Entry(frame)
        fields['name'].grid(row=1, column=1, sticky="ew", pady=5)

        ttk.Label(frame, text="–ö–∞–±–∏–Ω–µ—Ç:").grid(row=2, column=0, sticky="w", pady=5)
        fields['cabinet'] = ttk.Entry(frame)
        fields['cabinet'].grid(row=2, column=1, sticky="ew", pady=5)

        id_label = ttk.Label(frame, text="ID –ì—Ä—É–ø–ø—ã:")
        id_label.grid(row=3, column=0, sticky="w", pady=5)
        fields['id'] = ttk.Entry(frame)
        fields['id'].grid(row=3, column=1, sticky="ew", pady=5)

        group_id_label = ttk.Label(frame, text="ID –ì—Ä—É–ø–ø—ã (–¥–ª—è —Ç–µ–º—ã):")
        fields['group_id'] = ttk.Entry(frame, state="disabled")

        def on_type_change(event):
            if fields['type'].get() == "–¢–µ–º–∞":
                id_label.config(text="ID –¢–µ–º—ã:")
                group_id_label.grid(row=4, column=0, sticky="w", pady=5)
                fields['group_id'].grid(row=4, column=1, sticky="ew", pady=5)
                fields['group_id'].config(state="normal")
            else:
                id_label.config(text="ID –ì—Ä—É–ø–ø—ã:")
                group_id_label.grid_forget()
                fields['group_id'].grid_forget()
                fields['group_id'].config(state="disabled")

        fields['type'].bind("<<ComboboxSelected>>", on_type_change)

        btn_frame = ttk.Frame(frame)
        btn_frame.grid(row=5, column=0, columnspan=2, pady=10)

        def save_contact():
            try:
                contact_type = fields['type'].get()
                name = fields['name'].get().strip()
                cabinet = fields['cabinet'].get().strip()

                if not all([contact_type, name, cabinet]):
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.", parent=dialog)
                    return

                if contact_type == "–ì—Ä—É–ø–ø–∞":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ ID –Ω–∞ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                    group_id = int(fields['id'].get())
                    new_contact = {"id": group_id, "name": name, "cabinet": cabinet}
                    self.contacts["groups"].append(new_contact)
                else:  # –¢–µ–º–∞
                    topic_id = int(fields['id'].get())
                    group_id_for_topic = int(fields['group_id'].get())
                    new_contact = {
                        "group_id": group_id_for_topic, "topic_id": topic_id,
                        "name": name, "cabinet": cabinet
                    }
                    self.contacts["themes"].append(new_contact)

                self._save_json(CONTACTS_FILE, self.contacts)
                self._populate_contacts_tree()
                dialog.destroy()

            except ValueError:
                # –í –¥–∞–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ ID –≥—Ä—É–ø–ø—ã/—Ç–µ–º—ã/–≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏
                messagebox.showerror("–û—à–∏–±–∫–∞", "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parent=dialog)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {e}", parent=dialog)

        ttk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_contact).pack(side="left", padx=10)
        ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side="left", padx=10)

    def _load_json(self, filename: str, default: Dict = None) -> Dict:
        if not os.path.exists(filename):
            self._save_json(filename, default or {})
            return default or {}
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            messagebox.showerror("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {filename}. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
            self._save_json(filename, default or {})
            return default or {}

    def _save_json(self, filename: str, data: Dict) -> None:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

    def _load_config_into_ui(self) -> None:
        self.api_id_entry.insert(0, self.config.get("api_id", ""))
        self.api_hash_entry.insert(0, self.config.get("api_hash", ""))
        self.phone_entry.insert(0, self.config.get("phone", ""))

    def _populate_contacts_tree(self) -> None:
        for item in self.contacts_tree.get_children():
            self.contacts_tree.delete(item)
        for group in self.contacts.get("groups", []):
            self.contacts_tree.insert("", "end", values=(group["name"], group["cabinet"], "–ì—Ä—É–ø–ø–∞", group["id"]))
        for theme in self.contacts.get("themes", []):
            self.contacts_tree.insert("", "end", values=(theme["name"], theme["cabinet"], "–¢–µ–º–∞", theme["topic_id"]))

    def _select_all_contacts(self) -> None:
        for child in self.contacts_tree.get_children():
            self.contacts_tree.selection_add(child)

    def _deselect_all_contacts(self) -> None:
        self.contacts_tree.selection_remove(self.contacts_tree.selection())

    def _update_status(self, text: str, style: str = "Status.TLabel") -> None:
        self.status_label.config(text=f"–°—Ç–∞—Ç—É—Å: {text}", style=style)

    def _log(self, message: str) -> None:
        def append_message():
            self.log_text.configure(state="normal")
            self.log_text.insert(tk.END, message + "\n")
            self.log_text.see(tk.END)
            self.log_text.configure(state="disabled")

        self.root.after(0, append_message)

    def _update_progress(self, value: int, maximum: int) -> None:
        def set_progress():
            self.progress_bar['maximum'] = maximum
            self.progress_bar['value'] = value

        self.root.after(0, set_progress)

    def _save_settings(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏."""
        api_id = self.api_id_entry.get().strip()
        api_hash = self.api_hash_entry.get().strip()
        phone = self.phone_entry.get().strip()

        if not all([api_id, api_hash, phone]):
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è API!")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.
        self.config = {"api_id": api_id, "api_hash": api_hash, "phone": phone}
        self._save_json(CONFIG_FILE, self.config)
        self._update_status("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", "Success.TLabel")
        return True

    def _toggle_connection(self) -> None:
        if self.is_connected:
            threading.Thread(target=self._threaded_disconnect, daemon=True).start()
        else:
            if self._save_settings():
                threading.Thread(target=self._threaded_connect, daemon=True).start()

    def _threaded_connect(self) -> None:
        self.root.after(0, lambda: self._update_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", "Info.TLabel"))
        self.root.after(0, lambda: self.connect_btn.config(state="disabled"))
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ Telethon
        session_path = get_persistent_path(SESSION_FILE_NAME)

        # API ID –∑–¥–µ—Å—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∏–Ω–∞—á–µ TelegramClient –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É.
        try:
            api_id_int = int(self.config["api_id"])
        except ValueError:
            self.root.after(0, lambda: self._update_status("–û—à–∏–±–∫–∞: API ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!", "Error.TLabel"))
            self.root.after(0, lambda: self.connect_btn.config(state="normal"))
            return

        self.client = TelegramClient(session_path, api_id_int, self.config["api_hash"], loop=self.loop)

        try:
            self.loop.run_until_complete(self.client.connect())

            # --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
            if not self.loop.run_until_complete(self.client.is_user_authorized()):
                self.loop.run_until_complete(self.client.send_code_request(self.config["phone"]))

                # –í–≤–æ–¥ –∫–æ–¥–∞ (–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫)
                code = self.prompt_for_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:")
                if not code:
                    raise Exception("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

                try:
                    self.loop.run_until_complete(self.client.sign_in(self.config["phone"], code))
                except SessionPasswordNeededError:
                    # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è 2FA (–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫)
                    password = self.prompt_for_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                    if not password:
                        raise Exception("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    self.loop.run_until_complete(self.client.sign_in(password=password))

            # --- –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
            me = self.loop.run_until_complete(self.client.get_me())
            self.is_connected = True
            self.root.after(0, lambda: self._update_status(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫ {me.first_name}", "Success.TLabel"))
            self.root.after(0, lambda: self.connect_btn.config(text="üîå –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è"))

        except Exception as e:
            # –°—é–¥–∞ –ø–æ–ø–∞–¥–µ—Ç –∏ –∏—Å—Ö–æ–¥–Ω–∞—è struct.error, –µ—Å–ª–∏ ID —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            self.is_connected = False
            error_message = str(e)
            if "struct.error" in error_message and "number <= 2147483647" in error_message:
                error_message = "API ID —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 2147483647."

            self.root.after(0, lambda err=error_message: self._update_status(f"–û—à–∏–±–∫–∞: {err}", "Error.TLabel"))
            # –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
            try:
                if self.client:
                    self.loop.run_until_complete(self.client.disconnect())
            except Exception:
                pass
        finally:
            self.root.after(0, lambda: self.connect_btn.config(state="normal"))

    def _threaded_disconnect(self) -> None:
        self.root.after(0, lambda: self._update_status("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...", "Info.TLabel"))
        self.root.after(0, lambda: self.connect_btn.config(state="disabled"))
        if self.client and self.loop:
            self.loop.run_until_complete(self.client.disconnect())
        self.is_connected = False
        self.root.after(0, lambda: self._update_status("–û—Ç–∫–ª—é—á–µ–Ω–æ", "Status.TLabel"))
        self.root.after(0, lambda: self.connect_btn.config(text="üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", state="normal"))

    def _start_sending(self) -> None:
        if self.is_sending:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            return
        if not self.is_connected:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram!")
            self.notebook.select(0)
            return
        selected_items = self.contacts_tree.selection()
        if not selected_items:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
            return
        message = self.message_text.get("1.0", tk.END).strip()
        if not message:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
            return
        self.is_sending = True
        self.send_btn.config(state="disabled")
        self._log("üöÄ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É...")
        threading.Thread(target=self._threaded_send, args=(selected_items, message), daemon=True).start()

    def _threaded_send(self, selected_items: List[str], message: str) -> None:
        success, failed = 0, 0
        total = len(selected_items)
        self._update_progress(0, total)
        for i, item_id in enumerate(selected_items):
            values = self.contacts_tree.item(item_id, "values")
            name, _, item_type, entity_id = values
            try:
                full_contact = None
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º str(entity_id) –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –≤ values ID –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
                if item_type == "–ì—Ä—É–ø–ø–∞":
                    full_contact = next((g for g in self.contacts['groups'] if str(g['id']) == entity_id), None)
                elif item_type == "–¢–µ–º–∞":
                    full_contact = next((t for t in self.contacts['themes'] if str(t['topic_id']) == entity_id), None)
                if not full_contact:
                    raise ValueError("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ contacts.json")
                self.loop.run_until_complete(self._send_single_message(full_contact, message))
                self._log(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ '{name}'")
                success += 1
            except Exception as e:
                self._log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ '{name}': {e}")
                failed += 1
            self._update_progress(i + 1, total)
            self.loop.run_until_complete(asyncio.sleep(10))
        self._log(f"\nüìä –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–æ–∫: {failed}")
        self.root.after(0, lambda: messagebox.showinfo("–ì–æ—Ç–æ–≤–æ",
                                                       f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–æ–∫: {failed}"))
        self.is_sending = False
        self.root.after(0, lambda: self.send_btn.config(state="normal"))
        self._update_progress(0, total)

    async def _send_single_message(self, contact: Dict, message: str) -> None:
        # ID –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö (–≥—Ä—É–ø–ø –∏ —Ç–µ–º) —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è int()
        if 'topic_id' in contact:
            await self.client.send_message(entity=contact["group_id"], message=message, reply_to=contact["topic_id"])
        else:
            await self.client.send_message(contact["id"], message)

    def _on_closing(self) -> None:
        if self.is_sending:
            if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                return
        if self.is_connected:
            self._log("–û—Ç–∫–ª—é—á–∞—é—Å—å –æ—Ç Telegram –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å GUI
            threading.Thread(target=self._threaded_disconnect, daemon=True).start()
        self.root.destroy()

    def prompt_for_input(self, prompt_text: str) -> str:
        result = tk.StringVar()

        def create_dialog():
            dialog = tk.Toplevel(self.root)
            dialog.title("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥")
            dialog.transient(self.root)
            dialog.grab_set()

            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
            parent_x = self.root.winfo_x()
            parent_y = self.root.winfo_y()
            parent_width = self.root.winfo_width()
            parent_height = self.root.winfo_height()
            dialog_width = 300
            dialog_height = 150
            x = parent_x + (parent_width // 2) - (dialog_width // 2)
            y = parent_y + (parent_height // 2) - (dialog_height // 2)
            dialog.geometry(f"{dialog_width}x{dialog_height}+{x}+{y}")
            dialog.update_idletasks()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

            frame = ttk.Frame(dialog, padding=10)
            frame.pack(fill="both", expand=True)

            ttk.Label(frame, text=prompt_text, wraplength=dialog_width - 20).pack(padx=10, pady=(10, 5))
            entry = ttk.Entry(frame)
            entry.pack(padx=10, pady=5, fill="x")
            entry.focus_set()

            def on_ok():
                result.set(entry.get())
                dialog.destroy()

            ttk.Button(frame, text="OK", command=on_ok).pack(pady=10)
            self.root.wait_window(dialog)

        self.root.after(0, create_dialog)
        self.root.wait_variable(result)
        return result.get()


# ============================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================
if __name__ == "__main__":
    if sys.platform == 'win32':
        try:
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        except AttributeError:
            pass

    root = tk.Tk()
    app = ThemedTelegramSenderApp(root)
    root.mainloop()
